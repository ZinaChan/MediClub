@model DoctorViewModel
@{
    Layout = "~/Views/Shared/_LayoutAuth.cshtml";
    ViewData["Title"] = "Doctor Page";
    var IsAdmin = base.User.IsInRole("Admin");
}

@functions {
    public string GetDefaultAvatarUrl(string? gender)
    {
        if (gender == nameof(Gender.Male))
        {
            return "images/anonymous-man.png";
        }
        else if (gender == nameof(Gender.Female))
        {
            return "images/anonymous-woman.png";
        }
        else
        {
            return "images/anonymous.png";
        }
    }
}


<h1>Doctors List</h1>
<hr />

<div class="col mb-3">
    <div class="row-col-auto">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name or email" id="searchString"
                onkeypress="handleKeyPress(event)">
            <button type="button" class="btn btn-outline-primary" onclick="searchDoctors()">Search</button>
        </div>
    </div>
</div>
@* <div class="container mt-4">
<a asp-route="CreateDoctorPage" class="btn btn-success">Create new Doctor</a>
</div> *@

@if (!Model.Doctors.Any() || Model.Doctors is null)
{
    <div class="container mt-4">
        <div class="text-center">
            <img src="/images/sad-star.png" alt="No Doctors" class="img-fluid" style="width: 100px; height: 100px;">
            <p>No doctors available at the moment.</p>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-md-2 g-4" id="doctorList">
            @foreach (var doctor in Model.Doctors)
            {
                <div class="col doctor-card">
                    <div class="card mb-3">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="/@(doctor.AvatarUrl ?? GetDefaultAvatarUrl(doctor?.Gender))"
                                    class="img-fluid rounded-start" alt="Doctor Avatar">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5>@(doctor?.FirstName ?? "UNKNOWN") @(doctor?.LastName ?? "UNKNOWN")</h5>

                                    <p class="card-text"><strong>Email:</strong> @doctor?.Email</p>
                                    <div class="d-flex justify-content-between">
                                        <div>
                                            <a class="btn btn-primary" asp-controller="Doctor" asp-action="DoctorInfo"
                                                asp-route-doctorId="@doctor?.Id">View</a>
                                            @if (IsAdmin)
                                            {
                                                <button class="btn btn-warning "
                                                    onclick="showUpdateForm('@doctor?.Id')">Update</button>
                                                <button class="btn btn-danger" onclick="deleteDoctor('@doctor?.Id')">Delete</button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
@if (IsAdmin)
{
    <div id="updateForm" class="update-form" style="display:none;">
        <div class="card">
            <h3 class="card-header">Update Doctor</h3>
            <div class="card-body">
                <div class="mb-3">
                    <label for="newDepartment" class="form-label">Department:</label>
                    <select id="newDepartment" class="form-select" required>
                        <option value="">Select Department</option>
                        @foreach (Department department in Model.Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="newSpecialization" class="form-label">Specialization:</label>
                    <select id="newSpecialization" class="form-select" required>
                        <option value="">Select Specialization</option>
                        @foreach (Specialization specialization in Model.Specializations)
                        {
                            <option value="@specialization.Id">@specialization.Name</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <button class="btn btn-success" onclick="updateDoctor()">Save</button>
                    <button class="btn btn-secondary" onclick="hideUpdateForm()">Cancel</button>
                </div>
            </div>
        </div>
    </div> 
    }
    <script>
        function showUpdateForm(id) {
            fetchDoctorAndUpdateForm(id);
        }

        function fetchDoctorAndUpdateForm(id) {
            fetch(`/ Doctor / Json /${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch doctor.');
                    }
                    return response.json();
                })
                .then(data => {
                    updateFormWithDoctorData(data);
                })
                .catch(error => console.error('Error fetching doctor:', error));
        }

        function updateFormWithDoctorData(data) {
            document.getElementById('newSpecialization').value = data.specializationId;
            document.getElementById('newDepartment').value = data.departmentId;
            document.getElementById('updateForm').style.display = 'block';
        }

        function hideUpdateForm() {
            document.getElementById('updateForm').style.display = 'none';
        }

        function updateDoctor() {
            const specialization = document.getElementById('newSpecialization').value;
            const department = document.getElementById('newDepartment').value;

            const updatedDoctor = {
                departmentId: department,
                specializationId: specialization
            };

            fetch(`/ Doctor`, {
                method: 'PUT',
                headers:
                {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedDoctor)
            })
                .then(response => {
                    if (response.ok) {
                        alert('Doctor updated successfully!');
                        hideUpdateForm();
                        window.location.reload();
                    }
                    else {
                        alert('Failed to update doctor.');
                    }
                })
                .catch(error => console.error('Error updating doctor:', error));
        }

        function deleteDoctor(id) {
            if (confirm('Are you sure you want to delete this doctor?')) {
                fetch(`/ Doctor /${id}`, {
                    method: 'DELETE',
                    headers:
                    {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Doctor deleted successfully!');
                            window.location.reload();
                        }
                        else {
                            alert('Failed to delete doctor.');
                        }
                    });
            }
        }
    </script> 
<script>
    function searchDoctors() {
        const searchString = document.getElementById('searchString').value.trim().toLowerCase();
        const doctorCards = document.querySelectorAll('.doctor-card');

        doctorCards.forEach(card => {
            const userName = card.querySelector('h5').textContent.trim().toLowerCase();
            const userEmail = card.querySelector('.card-text:nth-of-type(1)').textContent.trim().toLowerCase();

            if (userName.includes(searchString) || userEmail.includes(searchString)) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });

        function handleKeyPress(event) {
            if (event.keyCode === 13) {
                // Enter press
                searchDoctors();
            }
        }

    }
</script>

<style>
    .update-form {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        display: none;
        z-index: 1000;
        width: 400px;
    }
</style>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}
