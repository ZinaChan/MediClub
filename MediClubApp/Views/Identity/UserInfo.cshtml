@model User

@{
    Layout = "~/Views/Shared/_LayoutAuth.cshtml";
    ViewData["Title"] = "User Info Page";
    var defaultAvatarUrl = GetDefaultAvatarUrl(Model.Gender);
}

@functions
{
    public string GetDefaultAvatarUrl(string gender)
    {
        if (gender == nameof(Gender.Male))
        {
            return "images/anonymous-man.png";
        }
        else if (gender == nameof(Gender.Female))
        {
            return "images/anonymous-woman.png";
        }
        else
        {
            return "images/anonymous.png";
        }
    }
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-4">
            <div class="avatar-container">
                <img id="avatarPreview" src="\@(Model.AvatarUrl ?? defaultAvatarUrl)"
                    class="img-fluid rounded-circle avatar-image " alt="User Avatar">
                <label for="avatarInput" class="change-avatar-label">
                    <i class="fas fa-camera"></i> Change Avatar
                </label>
                <input type="file" id="avatarInput" name="avatarInput" accept="image/*" style="display: none;">
            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">@Model.FirstName @Model.LastName</h5>
                    <p class="card-text">
                        <strong>Role:</strong> @Model.Role
                    </p>
                    <p class="card-text">
                        <strong>Email:</strong> @Model.Email
                    </p>

                    <button class="btn btn-warning me-2 mb-3" onclick="showUpdateForm('@Model.Id')">Edit
                        Profile</button>

                    <div id="updateForm" class="update-form" style="display:none;">
                        <div class="card">
                            <h3 class="card-header">Update User</h3>
                            <input type="hidden" id="userId">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="newFirstName" class="form-label">First Name:</label>
                                    <input type="text" id="newFirstName" class="form-control">
                                </div>

                                <div class="mb-3">
                                    <label for="newLastName" class="form-label">Last Name:</label>
                                    <input type="text" id="newLastName" class="form-control">
                                </div>

                                <div class="mb-3">
                                    <label for="newGender">Gender:</label>
                                    <select id="newGender" class="form-select" aria-label="Select Gender">
                                        @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                                        {
                                            <option value="@gender">@gender</option>
                                        }
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label for="newPhoneNumber" class="form-label">Phone Number:</label>
                                    <input type="text" id="newPhoneNumber" class="form-control">
                                </div>

                                <div class="mb-3">
                                    <button type="button" class="btn btn-success" onclick="updateUser()">Save</button>
                                    <button type="button" class="btn btn-secondary"
                                        onclick="hideUpdateForm()">Cancel</button>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function showUpdateForm(id) {
            fetchUserAndUpdateForm(id);
        }

        function fetchUserAndUpdateForm(id) {
            fetch(`/User/Json/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch user.');
                    }
                    return response.json();
                })
                .then(data => {
                    updateFormWithUserData(data);
                })
                .catch(error => console.error('Error fetching user:', error));
        }
        function updateFormWithUserData(data) {
            document.getElementById('userId').value = data.id;
            document.getElementById('newFirstName').value = data.firstName;
            document.getElementById('newLastName').value = data.lastName;
            document.getElementById('newPhoneNumber').value = data.phoneNumber;
            document.getElementById('newGender').value = data.gender;
            document.getElementById('updateForm').style.display = 'block';
        }

        function hideUpdateForm() {
            document.getElementById('updateForm').style.display = 'none';
        }

        function updateUser() {
            const userId = document.getElementById('userId').value;
            const firstName = document.getElementById('newFirstName').value;
            const lastName = document.getElementById('newLastName').value;
            const phoneNumber = document.getElementById('newPhoneNumber').value;
            const gender = document.getElementById('newGender').value;

            const updatedUser = {
                id: userId,
                firstName: firstName,
                lastName: lastName,
                phoneNumber: phoneNumber,
                gender: gender,
            };

            fetch(`/User`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedUser)
            })
                .then(response => {
                    if (response.ok) {
                        alert('User updated successfully!');
                        hideUpdateForm();
                        window.location.reload();
                    } else {
                        alert('Failed to update user.');
                    }
                })
                .catch(error => console.error('Error updating user:', error));
        }

        $('#avatarInput').change(function () {
            var file = this.files[0];
            var formData = new FormData();
            formData.append('avatarFile', file);

            $.ajax({
                url: '@Url.Action("ChangeAvatar", "User", new { id = Model.Id })',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (data) {
                    var updatedUrl = '@Url.Content("~/")' + data.avatarUrl + '?timestamp=' + new Date().getTime();
                    $('#avatarPreview').attr('src', updatedUrl);
                    alert('Avatar updated successfully!');
                },
                error: function () {
                    alert('Error updating avatar.');
                }
            });
        });


    </script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}

<style>
    .card-title {
        margin-bottom: 0.5rem;
        color: #343a40;
    }

    .card-text {
        color: #6c757d;
    }

    .avatar-container {
        position: relative;
        cursor: pointer;
    }

    .avatar-container .avatar-image {
        transition: transform 0.2s;
    }

    .avatar-container:hover .avatar-image {
        transform: scale(1.1);
    }

    .change-avatar-label {
        position: absolute;
        bottom: 10px;
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        cursor: pointer;
        display: none;
    }

    .avatar-container:hover .change-avatar-label {
        display: block;
    }
</style>
