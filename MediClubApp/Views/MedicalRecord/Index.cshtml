@model MedicalRecordViewModel;
@{
    Layout = "~/Views/Shared/_LayoutAuth.cshtml";
    ViewData["Title"] = "MedicalRecord Page";
    var IsAdmin = base.User.IsInRole("Admin");
    var IsPatient = base.User.IsInRole("Patient");

}



<h1>Medical Records Calendar</h1>
<div id="calendar"></div>
<br>
<br>
<br>
<hr />
<h1>Medical Records List</h1>
<hr />
<div class="col mb-3">
    @if (IsPatient)
    {
        <div class="row-cols-auto mb-3">
            <a asp-route="CreateMedicalRecordPage" class="btn btn-success">Create new Medical Record</a>
        </div>
    }
</div>

<div class="row-cols-auto">
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Search by name" id="searchString"
            onkeypress="handleKeyPress(event)">
        <button type="button" class="btn btn-outline-primary" onclick="searchMedicalRecord()">Search</button>
    </div>
</div>

<br />
<br />

@if (!Model.MedicalRecords.Any())
{
    <div class="no-medicalRecords">
        <img src="/images/sad-star.png" alt="No medical records" class="sad-face" />
        <p>No medical records available at the moment.</p>
    </div>
}
else
{
    <ol class="card-list" style="list-style: none;">
        @foreach (var medicalRecord in Model.MedicalRecords)
        {
            var today = DateTime.Today;
            var recordDate = medicalRecord.Date.Date;
            string itemClass = "";

            if (recordDate < today)
            {
                itemClass = "past";
            }
            else if (recordDate == today)
            {
                itemClass = "today";
            }
            else
            {
                itemClass = "future";
            }
            <li class="medicalRecord-item @itemClass">
                <a class="nav-link" asp-controller="MedicalRecord" asp-action="MedicalRecordInfo"
                    asp-route-medicalRecordId="@medicalRecord?.Id">
                    <div class="medicalRecord-details">
                        <p><strong>Patient:</strong> @(medicalRecord?.Patient.FirstName ?? "UNKNOWN")
                            @(medicalRecord?.Patient.LastName ?? "UNKNOWN")</p>
                        <p><strong>Doctor:</strong> @(medicalRecord?.Doctor.FirstName ?? "UNKNOWN")
                            @(medicalRecord?.Doctor.LastName ?? "UNKNOWN")</p>
                        <p><strong>Date :</strong> @medicalRecord?.Date.ToString("dd.MM.yyyy")</p>
                        <p><strong>Diagnosis:</strong> @(medicalRecord?.Diagnosis ?? "UNKNOWN")</p>
                        <p><strong>Treatment:</strong> @(medicalRecord?.Treatment ?? "UNKNOWN")</p>
                    </div>
                </a>
                <br>
                @if (IsAdmin)
                {
                    <div class="medicalRecord-actions">
                        <button class="update-btn btn btn-dark" onclick="showUpdateForm('@medicalRecord!.Id')">Update</button>
                        <button class="delete-btn btn btn-danger"
                            onclick="deleteMedicalRecord('@medicalRecord!.Id')">Delete</button>
                    </div>
                }
            </li>
        }
    </ol>
}

@if (IsAdmin)
{
    <div id="updateForm" class="update-form" style="display:none;">
        <div class="card">
            <h3 class="card-header">Update Medical Record</h3>
            <input type="hidden" id="medicalRecordId">
            <div class="card-body">
                <div class="mb-3">
                    <label for="newDoctor">Doctor:</label>
                    <select id="newDoctor" name="newDoctor" required>
                        <option value="">Select Doctor</option>
                        @foreach (Doctor doctor in Model.Doctors)
                        {
                            <option value="@doctor.Id">@doctor.FirstName @doctor.LastName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="newPatient">Patient:</label>
                    <select id="newPatient" name="newPatient" required>
                        <option value="">Select Patient</option>
                        @foreach (Patient patient in Model.Patients)
                        {
                            <option value="@patient.Id">@patient.FirstName @patient.LastName</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                    <label for="newDate">Date:</label>
                    <input type="date" max="@DateTime.Today.ToString("yyyy-MM-dd")" id="newDate">
                </div>
                <div class="mb-3">
                    <label for="newDiagnosis">Diagnosis:</label>
                    <input type="text" id="newDiagnosis">
                </div>
                <div class="mb-3">
                    <label for="newTreatment">Treatment:</label>
                    <input type="text" id="newTreatment">
                </div>
                <br>
                <div class="mb-3">
                    <button onclick="updateMedicalRecord()">Save</button>
                    <button onclick="hideUpdateForm()">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    function showUpdateForm(id) {
        fetchMedicalRecordsAndUpdateForm(id);
    }

    function fetchMedicalRecordsAndUpdateForm(id) {
        fetch(`/MedicalRecord/Json/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch medical record.');
                }
                return response.json();
            })
            .then(data => {
                updateFormWithMedicalRecordData(data);
            })
            .catch(error => console.error('Error fetching medical record:', error));
    }

    function updateFormWithMedicalRecordData(data) {
        document.getElementById('medicalRecordId').value = data.id;
        document.getElementById('newPatient').value = data.patientId;
        document.getElementById('newDoctor').value = data.doctorId;
        document.getElementById('newDate').value = data.date.split('T')[0];
        document.getElementById('newDiagnosis').value = data.diagnosis;
        document.getElementById('newTreatment').value = data.treatment;
        document.getElementById('updateForm').style.display = 'block';
    }

    function hideUpdateForm() {
        document.getElementById('updateForm').style.display = 'none';
    }

    function updateMedicalRecord() {
        const medicalRecordId = document.getElementById('medicalRecordId').value;
        const patient = document.getElementById('newPatient').value;
        const doctor = document.getElementById('newDoctor').value;
        const date = document.getElementById('newDate').value;
        const diagnosis = document.getElementById('newDiagnosis').value;
        const treatment = document.getElementById('newTreatment').value;

        const updatedMedicalRecord = {
            id: medicalRecordId,
            patientId: patient,
            doctorId: doctor,
            date: date,
            diagnosis: diagnosis,
            treatment: treatment
        };

        fetch(`/MedicalRecord`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedMedicalRecord)
        })
            .then(response => {
                if (response.ok) {
                    alert('Medical record updated successfully!');
                    hideUpdateForm();
                    window.location.reload();
                } else {
                    alert('Failed to update medical record.');
                }
            })
            .catch(error => console.error('Error updating medical record:', error));
    }

    function deleteMedicalRecord(id) {
        if (confirm('Are you sure you want to delete this medical record?')) {
            fetch(`/MedicalRecord/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert('Medical record deleted successfully!');
                        window.location.reload();
                    } else {
                        alert('Failed to delete medical record.');
                    }
                });
        }
    }
</script>

<script>
    function searchMedicalRecord() {
        const searchString = document.getElementById('searchString').value.trim().toLowerCase();
        const medicalRecordItems = document.querySelectorAll('.medicalRecord-item');

        medicalRecordItems.forEach(item => {
            const patientName = item.querySelector('.medicalRecord-details p:first-child').textContent.trim().toLowerCase();
            const doctorName = item.querySelector('.medicalRecord-details p:nth-child(2)').textContent.trim().toLowerCase();

            const matchesSearch = patientName.includes(searchString) ||
                doctorName.includes(searchString);

            if (matchesSearch) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            searchMedicalRecord();
        }
    }
</script>



@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.7.2/main.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.7.2/main.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.7.2/daygrid/main.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');

            var events = [
        @foreach (var medicalRecord in Model.MedicalRecords)
        {
            var recordDate = medicalRecord.Date.Date.ToString("yyyy-MM-dd");
            <text>{
                        title: '@(medicalRecord?.Patient.FirstName ?? "UNKNOWN") @(medicalRecord?.Patient.LastName ?? "UNKNOWN")',
                        start: '@recordDate',
                        url: '@Url.Action("MedicalRecordInfo", "MedicalRecord", new { medicalRecordId = medicalRecord.Id })'
                                },</text>
        }
                ];

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                events: events,
                eventClick: function (info) {
                    if (info.event.url) {
                        window.location.href = info.event.url;
                    }
                }
            });

            calendar.render();
        });
    </script>

}

<style>
    .medicalRecord-item {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
        transition: transform 0.3s ease-in-out;
        position: relative;
    }

    .medicalRecord-item {
        background-color: #cfe2f3;
    }

    .medicalRecord-item.past {
        background-color: #f8d7da;
    }

    .medicalRecord-item.today {
        background-color: #fff3cd;
    }

    .medicalRecord-item.future {
        background-color: #d4edda;
    }

    .medicalRecord-item:hover {
        transform: translateY(-5px);
    }

    .medicalRecord-details p {
        margin: 0;
        font-size: 16px;
        line-height: 1.6;
        font-weight: 550;
        color: #333;
    }

    .medicalRecord-details p strong {
        font-weight: bold;
        color: #666;
    }

    .medicalRecord-actions {
        flex-shrink: 0;
    }

    .medicalRecord-item hr {
        margin: 10px 0;
        border: none;
        border-top: 1px solid #e0e0e0;
    }

    .update-form {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        display: none;
        z-index: 1000;
        width: 400px;
    }

    .update-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .update-form input[type="text"],
    .update-form input[type="date"],
    .update-form input[type="email"],
    .update-form select {
        width: calc(100% - 22px);
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .update-form button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 10px;
    }

    .update-form button:hover {
        background-color: #4cae4c;
    }
</style>
