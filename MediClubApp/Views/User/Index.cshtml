@model IEnumerable<User>
@{
    Layout = "~/Views/Shared/_LayoutAuth.cshtml";
    ViewData["Title"] = "User Page";
    var IsAdmin = base.User.IsInRole("Admin");

}

@functions {
    public string GetDefaultAvatarUrl(string gender)
    {
        if (gender == nameof(Gender.Male))
        {
            return "images/anonymous-man.png";
        }
        else if (gender == nameof(Gender.Female))
        {
            return "images/anonymous-woman.png";
        }
        else
        {
            return "images/anonymous.png";
        }
    }
}

<h1>Users List</h1>
<hr />

<div class="col mb-3">
    @* <div class="row-cols-4 mb-1">
    <a asp-action="Create" class="btn btn-success">Create new User</a>
    </div> *@
    <div class="row-col-auto">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search by name or email" id="searchString"
                onkeypress="handleKeyPress(event)">
            <button type="button" class="btn btn-outline-primary" onclick="searchUsers()">Search</button>
        </div>
    </div>
</div>

@if (!Model.Any())
{
    <div class="text-center">
        <img src="/images/sad-star.png" alt="No users" class="img-fluid" style="max-width: 150px;" />
        <p>No users available at the moment.</p>
    </div>
}
else
{
    <div class="container">
        <div class="row row-cols-1 row-cols-md-2 g-4" id="userList">
            @foreach (var user in Model)
            {
                <div class="col user-card">
                    <div class="card mb-3">
                        <div class="row g-0">
                            <div class="col-md-4">
                                <img src="/@(user.AvatarUrl ?? GetDefaultAvatarUrl(user.Gender))"
                                    class="img-fluid rounded-start" alt="User Avatar">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <h5 class="card-title">@user.FirstName @user.LastName</h5>
                                    <p class="card-text"><strong>Role:</strong> @user.Role</p>
                                    <div class="d-flex justify-content-between">
                                        <a class="btn btn-primary" asp-controller="User" asp-action="UserInfo"
                                            asp-route-userId="@user.Id">View</a>
                                        @if (IsAdmin)
                                        {
                                            <div>
                                                <button class="btn btn-warning me-2"
                                                    onclick="showUpdateForm('@user.Id')">Update</button>
                                                <button class="btn btn-danger" onclick="deleteUser('@user.Id')">Delete</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}
@if (IsAdmin)
{
    <div id="updateForm" class="update-form" style="display:none;">
        <div class="card">
            <h3 class="card-header">Update User</h3>
            <input type="hidden" id="userId">
            <div class="card-body">
                <div class="mb-3">
                    <label for="newFirstName" class="form-label">First Name:</label>
                    <input type="text" id="newFirstName" class="form-control">
                </div>

                <div class="mb-3">
                    <label for="newLastName" class="form-label">Last Name:</label>
                    <input type="text" id="newLastName" class="form-control">
                </div>

                <div class="mb-3">
                    <label for="newUserRole">Role:</label>
                    <select id="newUserRole" class="form-select" aria-label="Select Role">
                        @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="newGender">Gender:</label>
                    <select id="newGender" class="form-select" aria-label="Select Gender">
                        @foreach (Gender gender in Enum.GetValues(typeof(Gender)))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </select>
                </div>

                <div class="mb-3">
                    <label for="newPhoneNumber" class="form-label">Phone Number:</label>
                    <input type="text" id="newPhoneNumber" class="form-control">
                </div>

                <div class="mb-3">
                    <button type="button" class="btn btn-success" onclick="updateUser()">Save</button>
                    <button type="button" class="btn btn-secondary" onclick="hideUpdateForm()">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        function showUpdateForm(id) {
            fetchUserAndUpdateForm(id);
        }

        function fetchUserAndUpdateForm(id) {
            fetch(`/User/Json/${id}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch user.');
                    }
                    return response.json();
                })
                .then(data => {
                    updateFormWithUserData(data);
                })
                .catch(error => console.error('Error fetching user:', error));
        }

        function updateFormWithUserData(data) {
            document.getElementById('userId').value = data.id;
            document.getElementById('newFirstName').value = data.firstName;
            document.getElementById('newLastName').value = data.lastName;
            document.getElementById('newPhoneNumber').value = data.phoneNumber;
            document.getElementById('newGender').value = data.gender;
            document.getElementById('newUserRole').value = data.role;
            document.getElementById('updateForm').style.display = 'block';
        }

        function hideUpdateForm() {
            document.getElementById('updateForm').style.display = 'none';
        }

        function updateUser() {
            const userId = document.getElementById('userId').value;
            const firstName = document.getElementById('newFirstName').value;
            const lastName = document.getElementById('newLastName').value;
            const phoneNumber = document.getElementById('newPhoneNumber').value;
            const gender = document.getElementById('newGender').value;
            const role = document.getElementById('newUserRole').value;

            const updatedUser = {
                id: userId,
                firstName: firstName,
                lastName: lastName,
                phoneNumber: phoneNumber,
                gender: gender,
                role: role
            };

            fetch(`/User`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedUser)
            })
                .then(response => {
                    if (response.ok) {
                        alert('User updated successfully!');
                        hideUpdateForm();
                        window.location.reload();
                    } else {
                        alert('Failed to update user.');
                    }
                })
                .catch(error => console.error('Error updating user:', error));
        }

        function deleteUser(id) {
            if (confirm('Are you sure you want to delete this user?')) {
                fetch(`/User/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            alert('User deleted successfully!');
                            window.location.reload();
                        } else {
                            alert('Failed to delete user.');
                        }
                    });
            }
        }
    </script>
    <script>

        function searchUsers() {
            const searchString = document.getElementById('searchString').value.trim().toLowerCase();
            const userCards = document.querySelectorAll('.user-card');

            userCards.forEach(card => {
                const userName = card.querySelector('.card-title').textContent.trim().toLowerCase();
                const userEmail = card.querySelector('.card-text').textContent.trim().toLowerCase();

                if (userName.includes(searchString) || userEmail.includes(searchString)) {
                    card.style.display = '';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        function handleKeyPress(event) {
            if (event.keyCode === 13) {
                // Enter press
                searchUsers();
            }
        }

    </script>
}
<style>
    .update-form {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        display: none;
        z-index: 1000;
        width: 400px;
    }
</style>

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
}