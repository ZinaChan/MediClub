@model RoomViewModel;
@{
    ViewData["Title"] = "Room Page";
}

<h1> Rooms List</h1>
<hr />
<a asp-route="CreateRoomPage"> <button class="btn-modern">Create new Room</button> </a>
<br />
<br />

@if (!Model.Rooms.Any())
{
    <div class="no-rooms">
        <img src="/images/sad-star.png" alt="No rooms" class="sad-face" />
        <p>No rooms available at the moment.</p>
    </div>
}
else
{
    <ol class="card-list">
        @foreach (var room in Model.Rooms)
        {
            <li class="room-item">
                <a class="nav-link" asp-controller="Room" asp-action="RoomInfo" asp-route-roomId="@room?.Id">

                    <div class="room-details">
                        <p><strong>RoomNumber:</strong> @(room?.RoomNumber ?? "UNKNOWN")</p>
                        <p><strong>Department Name:</strong> @(room?.Department.Name ?? "UNKNOWN")</p>
                    </div>
                </a>
                <br>
                <div class="room-actions">
                    <button class="update-btn btn-close-white" onclick="showUpdateForm('@room!.Id')">Update</button>
                    <button class="delete-btn btn-danger" onclick="deleteRoom('@room!.Id')">Delete</button>
                </div>
            </li>
            <hr class="divider" />
        }
    </ol>
}

<div id="updateForm" class="update-form" style="display:none;">
    <h3>Update Room</h3>
    <input type="hidden" id="roomId">
    <div>
        <label for="newRoomNumber">Room Number:</label>
        <input type="text" id="newRoomNumber">
    </div>
    <div>
        <label for="newDepartment">Department:</label>
        <select id="newDepartment" name="newDepartment" required>
            <option value="">Select Department</option>
            @foreach (Department department in Model.Departments)
            {
                <option value="@department.Id">@department.Name</option>
            }
        </select>
    </div>
    <div class="room-actions">
        <button onclick="updateRoom()">Save</button>
        <button onclick="hideUpdateForm()">Cancel</button>
    </div>
</div>

<script>
    function showUpdateForm(id) {
        fetchRoomAndUpdateForm(id);
    }

    function fetchRoomAndUpdateForm(id) {
        fetch(`/Room/Json/${id}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to fetch room.');
                }
                return response.json();
            })
            .then(data => {
                updateFormWithRoomData(data);
            })
            .catch(error => console.error('Error fetching room:', error));
    }

    function updateFormWithRoomData(data) {
        document.getElementById('roomId').value = data.id;
        document.getElementById('newRoomNumber').value = data.roomNumber;
        document.getElementById('newDepartment').value = data.departmentId;
        document.getElementById('updateForm').style.display = 'block';
    }

    function hideUpdateForm() {
        document.getElementById('updateForm').style.display = 'none';
    }

    function updateRoom() {
        const roomId = document.getElementById('roomId').value;
        const roomNumber = document.getElementById('newRoomNumber').value;
        const department = document.getElementById('newDepartment').value;

        const updatedRoom = {
            id: roomId,
            roomNumber: roomNumber,
            departmentId: department
        };

        fetch(`/Room`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(updatedRoom)
        })
            .then(response => {
                if (response.ok) {
                    alert('Room updated successfully!');
                    hideUpdateForm();
                    window.location.reload();
                } else {
                    alert('Failed to update room.');
                }
            })
            .catch(error => console.error('Error updating room:', error));
    }

    function deleteRoom(id) {
        if (confirm('Are you sure you want to delete this room?')) {
            fetch(`/Room/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => {
                    if (response.ok) {
                        alert('Room deleted successfully!');
                        window.location.reload();
                    } else {
                        alert('Failed to delete room.');
                    }
                });
        }
    }
</script>

<style>
    h1 {
        color: #333;
    }

    .btn-modern {
        padding: 10px 20px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-modern:hover {
        background-color: #218838;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="date"],
    input[type="email"],
    select,
    textarea {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
    }

    button:hover {
        background-color: #4cae4c;
    }

    .card-list {
        list-style-type: none;
        padding: 0;
    }

    .no-rooms {
        text-align: center;
        margin-top: 20px;
    }

    .no-rooms img.sad-face {
        width: 100px;
        height: 100px;
    }

    .no-rooms p {
        font-size: 18px;
        color: #888;
    }

    .room-item {
        background-color: #cfe2f3;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        padding: 20px;
        transition: transform 0.3s ease-in-out;
        position: relative;
    }

    .room-item:hover {
        transform: translateY(-5px);
    }

    .room-details p {
        margin: 0;
        font-size: 16px;
        line-height: 1.6;
        font-weight: 550;
        color: #333;
    }

    .room-details p strong {
        font-weight: bold;
        color: #666;
    }

    .room-actions {
        flex-shrink: 0;
    }

    .room-item hr {
        margin: 10px 0;
        border: none;
        border-top: 1px solid #e0e0e0;
    }

    .update-form {
        position: absolute;
        top: 40%;
        left: 50%;
        transform: translate(-40%, -50%);
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.418);
        display: none;
        z-index: 1000;
        width: 400px;
    }

    .update-form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    .update-form input[type="text"],
    .update-form input[type="date"],
    .update-form input[type="email"],
    .update-form select {
        width: calc(100% - 22px);
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-bottom: 10px;
    }

    .update-form button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 10px;
    }

    .update-form button:hover {
        background-color: #4cae4c;
    }
</style>